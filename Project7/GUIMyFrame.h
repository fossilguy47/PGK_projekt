#ifndef __GUIMyFrame__
#define __GUIMyFrame__

/**
@file
Subclass of MyFrame, which is generated by wxFormBuilder.
*/

#include "GUI.h"

//// end generated include
#include <wx/filedlg.h>
#include <wx/dcmemory.h>
#include <wx/dcclient.h>
#include <wx/dcbuffer.h>
#include <wx/colourdata.h>
#include <wx/colordlg.h>
#include <memory>
#include <vector>
#include <fstream>

class ConfigClass;
class Printout;

struct Point
{
	double mX, mY, mZ;
	Point(double x = 0., double y = 0., double z = 0.) : mX(x), mY(y), mZ(z) {}
	Point& operator=(const Point& other)
	{
		mX = other.mX;
		mY = other.mY;
		mZ = other.mZ;
		return *this;
	}
	void operator()(double x, double y, double z) { mX = x; mY = y; mZ = z; }
};

struct Segment {
	Point begin, end;
	Segment(Point begin_point, Point end_point) : begin(begin_point), end(end_point) {}
};

/** Implementing MyFrame */
class GUIMyFrame : public MyFrame
{
	protected:
		// Handlers for MyFrame events.
		void drawing_panelUpdate( wxUpdateUIEvent& event );
		void function_choiceOnChoice( wxCommandEvent& event );
		void load_buttonOnButtonClick( wxCommandEvent& event );
		void x0_update( wxCommandEvent& event );
		void y0_update( wxCommandEvent& event );
		void z0_update( wxCommandEvent& event );
		void x1_update( wxCommandEvent& event );
		void y1_update( wxCommandEvent& event );
		void z1_update( wxCommandEvent& event );
		void draw_buttonOnButtonClick( wxCommandEvent& event );
		void contour_checkBoxOnCheckBox( wxCommandEvent& event );
		void x_step_update( wxCommandEvent& event );
		void y_step_update( wxCommandEvent& event );
		void zoom_sliderOnScroll( wxScrollEvent& event );
		void x_sliderOnScroll( wxScrollEvent& event );
		void y_sliderOnScroll( wxScrollEvent& event );
		void z_sliderOnScroll( wxScrollEvent& event );
		void save_buttonOnButtonClick( wxCommandEvent& event );
		void print_buttonOnButtonClick( wxCommandEvent& event );
	public:
		/** Constructor */
		GUIMyFrame( wxWindow* parent );
	//// end generated class members
		~GUIMyFrame() {};
		std::shared_ptr<ConfigClass> cfg;
		std::vector<Segment> data;
		void Repaint();

};

#endif // __GUIMyFrame__
